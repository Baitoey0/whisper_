async function getCurrentUser() {
  try {
    const res = await fetch('/api/me', { credentials: 'include' });
    const data = await res.json();
    return data.user;
  } catch (err) {
    return null;
  }
}

document.addEventListener('DOMContentLoaded', () => {
  const saveBtn = document.getElementById('saveWrite');
  const writeText = document.getElementById('writeText');
  const writeMood = document.getElementById('writeMood');
  const alertBox = document.getElementById('writeAlert');
  const quickMoodContainer = document.getElementById('quickMoodButtons');

  const dailyQuestions = [
    {
      type: "choice",
      text: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
      options: ["‡∏ó‡∏∞‡πÄ‡∏•", "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤", "‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß", "‡∏™‡∏≤‡∏¢‡∏•‡∏°", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"]
    },
    {
      type: "text",
      text: "‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ?"
    }
  ];

  const positiveResponses = [
    "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ üòä",
    "‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ üíñ",
    "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏≤‡∏ô ‡πÜ ‡∏ô‡∏∞",
    "‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ ‡πÜ ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏ô‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏•‡∏¢ üåü"
  ];

  const gentleResponses = [
    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏∞ üå∑",
    "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ü§ç",
    "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    "‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡πÅ‡∏Ñ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å ‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß"
  ];

  function showFeedback() {
    const otherInput = document.getElementById('otherMood')?.value.toLowerCase() || '';
    const selectedRadio = document.querySelector('input[name="dailyChoice"]:checked');
    const feedbackBox = document.getElementById("feedbackBox");

    let response;
    if (selectedRadio && selectedRadio.value === "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ" && otherInput) {
      if (otherInput.includes("‡∏™‡∏∏‡∏Ç") || otherInput.includes("‡∏î‡∏µ") || otherInput.includes("‡πÄ‡∏ö‡∏¥‡∏Å‡∏ö‡∏≤‡∏ô")) {
        response = positiveResponses[Math.floor(Math.random() * positiveResponses.length)];
      } else {
        response = gentleResponses[Math.floor(Math.random() * gentleResponses.length)];
      }
    } else if (selectedRadio) {
      response = gentleResponses[Math.floor(Math.random() * gentleResponses.length)];
    } else {
      response = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ñ‡πà‡∏∞ üòä";
    }

    feedbackBox.innerText = response;
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
  const question = dailyQuestions[Math.floor(Math.random() * dailyQuestions.length)];
  const container = document.getElementById("dailyQuestionText");
  if (container) {
    if (question.type === "text") {
      container.innerHTML = `${question.text}<br>
        <textarea class="textarea-field" id="textAnswer" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."></textarea>
        <button onclick="showFeedback()" class="button button-secondary">‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</button>`;
    } else if (question.type === "choice") {
      container.innerHTML = `${question.text}<br>` +
        question.options.map(opt => {
          if (opt === "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ") {
            return `<label><input type="radio" name="dailyChoice" value="‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"> ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</label>
              <input type="text" id="otherMood" class="input-field" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...">`;
          } else {
            return `<label><input type="radio" name="dailyChoice" value="${opt}"> ${opt}</label>`;
          }
        }).join("<br>") +
        `<br><button onclick="showFeedback()" class="button button-secondary">‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</button>`;
    }
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ã‡∏ü mood
  saveBtn.addEventListener('click', () => {
    const mood = writeMood.value;
    const text = writeText.value;
    if (!mood) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå');
      return;
    }
    saveMoodEntry(mood, text);
  });

  // ‡∏õ‡∏∏‡πà‡∏° quick mood
  if (quickMoodContainer) {
    quickMoodContainer.querySelectorAll('button[data-mood]').forEach(btn => {
      btn.addEventListener('click', () => {
        const mood = btn.getAttribute('data-mood');
        saveMoodEntry(mood, '');
      });
    });
  }

  async function saveMoodEntry(mood, text) {
    const user = await getCurrentUser();
    if (!user) { alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'); return; }
    const userId = user.userId;
    if (!userId) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå');
      return;
    }
    try {
      const moodRes = await fetch('/submit-mood', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, mood, text: text || '' })
      });
      const moodData = await moodRes.json();
      if (moodData.error) {
        alert(moodData.error);
        return;
      }
      if (text && text.trim() !== '') {
        const noteRes = await fetch('/submit-journal', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId, mood, text: text.trim() })
        });
        const noteData = await noteRes.json();
        if (noteData.error) {
          alert(noteData.error);
          return;
        }
      }
      writeText.value = '';
      writeMood.value = '';
      alertBox.style.display = 'block';
      setTimeout(() => {
        alertBox.style.display = 'none';
      }, 3000);
    } catch (err) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
    }
  }
});

